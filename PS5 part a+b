% Parameters
L = 2000000; % Length
u = 1;       % Velocity
dx = 2000;   % Spatial step
nx = floor(L / dx); % Number of spatial points
x = linspace(0, L, nx); % Spatial domain

% Function to perform simulation
function [x, results] = simulate(Cr, tot_days)
    L = 2000000;
    u = 1;
    dx = 2000;
    nx = floor(L / dx);
    x = linspace(0, L, nx);
    
    % Time step and total time
    dt = Cr * dx / u; % Time step
    tf = tot_days * 24 * 3600; % Total time in seconds
    nt = floor(tf / dt); % Number of time steps
    
    % Initial condition
    J = exp(-((0.0001 * x - 30).^2)); 
    J_new = J;

    % Construct matrix M using sparse diagonal construction
    data = [Cr * ones(1, nx); (1 - Cr) * ones(1, nx)];
    diags = [-1, 0]; % Diagonal offsets
    M = spdiags(data', diags, nx, nx);

    % Apply boundary conditions to matrix M
    M(1, 1) = 1; % Top-left corner
    M(end, end) = 1; % Bottom-right corner
    M(end, end - 1) = 0; % Set the second-to-last entry in the last row to 0

    % Results storage
    results = {J}; % Cell array to store results
    stepsday = floor(24 * 3600 / dt); % Number of steps in one day

    % Time-stepping loop
    for step = 1:nt
        J_new = M * J'; % Update using matrix multiplication
        J = J_new';     % Transpose back for next step
        if mod(step, stepsday) == 0
            results{end + 1} = J; % Store result at the end of each day
        end
    end
end

% Function to plot results
function plot_results(x, results, Cr, tot_days)
    figure;
    hold on;
    cmap = colormap('parula'); 
    num_results = length(results);
    colors = linspace(1, size(cmap, 1), num_results);
    
    for day = 1:num_results
        plot(x / 1e3, results{day}, 'Color', cmap(round(colors(day)), :),'DisplayName', ['Day ', num2str(day - 1)]); % Convert km
    end
    xlabel('Distance (km)');
    ylabel('Concentration');
    title(['Advection of J over ', num2str(tot_days), ' days (C=', num2str(Cr), ')']);
    legend('Location', 'northeastoutside');
    grid on;
    hold off;
end

% Main simulation and plotting
tot_days = 30; % Total days for simulation
for Cr = [0.1, 0.5, 1.01]
    [x, results] = simulate(Cr, tot_days); % Run simulation
    plot_results(x, results, Cr, tot_days); % Plot results
end

