% Define variables
xmin = 0; xmax = 1; % Domain limits (nondimensionalized)
N = 100; % Number of spatial points
dx = (xmax - xmin) / N; % Spatial step size
x = xmin - dx : dx : xmax + dx; % Include ghost points for boundary conditions

tmax = 0.5; % Total simulation time (nondimensionalized)
dt = 0.005; % Time step
B = 1; % Coefficient for nonlinear velocity (nondimensional)
k = 1.5; % Nonlinearity exponent

% Initial condition
h = zeros(size(x));
h(x <= 0.1) = sin(10 * pi * x(x <= 0.1)); % Initial profile
h_next = h; % Placeholder for the next time step


% Time-stepping loop
t = 0; % Initialize time
nsteps = (tmax / dt); % Total number of time steps

for n = 1:nsteps
    % Boundary conditions
    h(1) = 0; % h*(0, t*) = 0
    h(end) = 0; % h*(1, t*) = 0

    % Update using Forward Euler with nonlinear velocity
    for i = 2:N+2
        velocity = B * h(i)^(k-1); % Nonlinear velocity term
        h_next(i) = h(i) - velocity * dt / dx * (h(i) - h(i-1)); % Update h
    end

    % Update time and solution
    t = t + dt;
    h = h_next;

    % Plot numerical solution
    plot(x, h, 'b-', 'LineWidth', 1.5); hold on;

    % Exact solution
    exact = sin(10 * pi * (x - B * t));
    exact(x - B * t < 0 | x - B * t > 1) = 0; % Boundary handling
    plot(x, exact, 'r--', 'LineWidth', 1.5);
    hold off;

    axis([xmin xmax -1 1]);
    xlabel('x^* (Nondimensional Distance)', 'FontSize', 16);
    ylabel('h^* (Nondimensional Thickness)', 'FontSize', 16);
    title(sprintf('Time = %.3f', t), 'FontSize', 16);
    legend('Numerical Solution', 'Exact Solution');
    grid on;
    pause(0.05); % Pause for visualization
end