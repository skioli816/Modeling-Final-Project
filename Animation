% Parameters
L = 1; % Domain length (nondimensionalized)
N = 100; % Number of spatial points
dx = L / N; % Spatial step size
x = linspace(0, L, N+2); % Spatial grid including ghost points for boundaries
tmax = 0.5; % Maximum simulation time
dt = 0.005; % Time step
B = 1; % Coefficient for nonlinear velocity
k = 1.5; % Nonlinear exponent

% Initial condition
h = zeros(size(x)); % Initialize lahar thickness
h(x <= 0.1) = sin(10 * pi * x(x <= 0.1)); % Initial profile
h_next = h; % Placeholder for the next time step

% Time-stepping loop
nsteps = round(tmax / dt); % Number of time steps

% Set up the figure for animation
figure;
plot_handle = plot(x, h, 'b-', 'LineWidth', 2); % Initial plot
xlabel('x (Distance)');
ylabel('h (Thickness)');
title('Lahar Flow Evolution');
grid on;
ylim([-0.1 1.1]); % Adjust the y-axis limits
legend('Numerical Solution');
pause(1); % Pause to display the initial condition

for n = 1:nsteps
    % Boundary conditions
    h(1) = 0; % h(0, t) = 0
    h(end) = 0; % h(L, t) = 0

    % Update using Forward Euler with nonlinear velocity
    for i = 2:N+1 % Exclude boundaries
        velocity = B * h(i)^(k-1); % Nonlinear velocity term
        h_next(i) = h(i) - dt / dx * (h(i) * velocity - h(i-1) * (B * h(i-1)^(k-1)));
    end

    % Update the solution
    h = h_next;

    % Update the plot dynamically
    set(plot_handle, 'YData', h); % Update the data in the plot
    title(sprintf('Lahar Flow Evolution at t = %.3f', n * dt)); % Update the title with the current time
    pause(0.01); % Pause for animation effect
end

% Hold the final plot for review
hold on;
plot(x, h, 'r--', 'LineWidth', 1); % Plot final state as a dashed line
legend('Evolving Flow', 'Final State');
