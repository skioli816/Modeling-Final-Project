import numpy as np
import matplotlib.pyplot as plt

# Parameters
L = 100  # Length of the domain
Nx = 200  # Number of spatial points
dx = L / Nx  # Spatial step
T = 50  # Total simulation time
dt = 0.01  # Time step
k = 1.5  # Constant


x = np.linspace(0, L, Nx)  # Spatial domain
h = np.zeros(Nx)  # Initialize h
h[:Nx // 4] = np.sin(np.pi * x[:Nx // 4] / x[Nx // 4])  # Initial condition

# Courant number check
C = max(k * h) * dt / dx
if C > 1:
    raise ValueError('Unstable: Reduce dt or increase dx')

# Time stepping (upwind scheme)
for n in range(int(T / dt)):
    h_new = np.copy(h)
    for i in range(1, Nx):
        h_new[i] = h[i] - k * h[i] * (h[i] - h[i - 1]) * dt / dx
    h = h_new

    # Visualization
    if n % 50 == 0:
        plt.plot(x, h, label=f'Time = {n * dt:.2f}')
        plt.title('Lahar Thickness')
        plt.xlabel('x'); plt.ylabel('h')
        plt.legend()
        plt.pause(0.1)
        plt.clf()

plt.show()